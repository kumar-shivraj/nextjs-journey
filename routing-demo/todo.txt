=============================   scenario 1 : root route("/")    ==================================
*   delete/rename the app directory inside src folder as we are going to create it manually
*   create the app directory inside src folder
*   create page.tsx file inside app folder
*   create a React component named as Home
*   Now, application might have crashed because we deleted the app directory.
    So, stop the application and start again
*   It should reder that Home component at root route("/")

*   Notice  :   layout.tsx was earlier present inside app directory, but we didn't create it now.
                When we first access the root route("/"), this layout.tsx is automatically created.

==================================================================================================

========================   scenario 2 : two additional routes("/about" and "/profile")    ========================
*   create a new folder called about inside app folder.
*   inside this about folder, create a page.tsx file.
*   from this file, default export the react component
*   now "/about" route is created. Do the above 3 steps for the "/profile" route as well.


*   So, here we can conclude that routes are directly tied with the folder name inside the app directory.
*   In case, someone tries to access the url that doesn't match any file inside the app folder.
    *   let's say someone tries to access "/dashboard" route.
    *   In this case, nextjs will automatically serve 404 response. 
    *   We don't need to write any special code to handle this non existing routes.

*   Here we understood that we don't need to mess around when installing and configuring the router in our code.
*   Our file and folder structures does all the heavy lifting.
==================================================================================================================

=========================================   scenario 3 : nested routes    ========================================
*   in this scenario, we will cover nested routes ("/blog", "/blog/first", "/blog/second")
*   create a blog folder inside app directory
*   inside this blog folder create page.tsx file and export a default react component from this.
*   "/blog" route is created successfully.

*   create two folder("first" and "second") inside this blog folder.
*   create page.tsx inside each these two folder and export a default react component from this.
*   "/blog/first" and "/blog/second" route is created successfully now.

*   Here we understood that next js mirrors the folder structure into the urls automatically
==================================================================================================================